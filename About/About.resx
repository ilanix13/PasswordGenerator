<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA0XQXANF0
        FgDTeR8A1XsdANWAFADVgBUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADRei8A03wtANB6
        LgDReyoA0n0oANOBJQDTgCAA1YAcANaBGADWghQA2oUQANeCEgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMl0PgDIdD4AzHU+AM53
        OQDXgSUC0HouIdF7KkDSfCZW030iZNR+H2TVgBtX1oEYQdaCFCLdhw4D14MRANiEDgDZhw0A2YYNAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADKckQAzG1AAMx0
        RwDMdjwLznc5Rc94NZbPeTHK0Xss6dJ8KP3TfSX/1H4h/9R/Hf3VgBrq1oIWzNeCE5nYgxBJ2YQNDNmD
        DADdhQkA24UKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC/cFAA0HFQAMlx
        TADbUyIBynREOMx1QKPNdjzuznc4/894NP/QejD/0Xss/9J8Kf/TfSX/034h/9R/Hf/VgRn/1oIV/9eC
        EvDYhA+o2YUMPO2GAAHZhQsA3n0MANWKCwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMtt
        WADKblMAym9NBclxS17KckfZy3RE/8x1QP/Ndjz/znc4/894NP/QejD/0Xss/9J8KP/TfSX/1H4h/9R/
        Hf/VgRn/1oIV/9eDEf/YhA7c2YQMZNqGDAfcgw0A34AMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AADEa2EAxW1YAMNuVQXHb1JvyHBP7MlxS//Kckj/y3RE/8x1QP/Ndjz/znc4/894NP/QejD/0Xss/9J8
        Kf/TfSX/034h/9R/Hf/VgBn/1oIV/9eDEf/YhA7v2YUMeNuGDAfZhgsA2oYLAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAyGRkAMVpYQCubZgAxm1bW8ZuV+vHb1P/yHBP/8lxS//Kc0f/y3RE/8x1QP/Ndjz/zHU2/8t0
        L//MdSv/z3kq/9J8Kf/TfSX/1H4h/9R/Hf/VgRn/1oIV/9eDEf/YhA7v2YQMYuulAAHdjAgA2ocIAAAA
        AAAAAAAAAAAAAAAAAADKY2IAwmxiAMRqYjPFbF/Vxm1b/8ZuV//Hb1P/yHBP/8lxS//Kckj/y3RE/8pz
        Pv/JgVH/1aF6/9WieP/LhEb/z3kq/9J8Kf/TfSX/034h/9R/Hf/VgBn/1oIV/9eDEf/YhA7b2YUMOdiD
        EQDbiAYAAAAAAAAAAAAAAAAAAAAAAMNpZwDCaGoIw2lmmsRqYv/FbF7/xm1b/8duV//Hb1P/yHBP/8lx
        S//Kc0f/yG8//9Sfgf///////////9aieP/MdSv/0Xss/9J8KP/TfSX/1H4h/9R/Hf/VgRn/1oIV/9eD
        Ef/XhA+j14UOC9eEDgAAAAAAAAAAAAAAAAC8YnQAwWdtAMJnbjrCaGrpw2lm/8RqYv/Fa1//xm1b/8Zu
        V//Hb1P/yHBP/8lxS//HbkP/056C////////////1aF6/8t0L//QejD/0Xss/9J8Kf/TfSX/034h/9R/
        Hf/VgBn/1oIV/9eDEu7YgxBD14MRANiBEwAAAAAAAAAAALZfagD/nJYAwGZxisFnbv/CaGr/w2lm/8Rq
        Yv/FbF7/xm1b/8duV//Hb1P/yHBP/8ZtRv/TnYT////////////VoHz/y3Mz/894NP/QejD/0Xss/9J8
        KP/TfSX/1H4h/9R/Hf/VgRn/1oIV/9eCE5PjfR8B24AYAAAAAAAAAAAAvmN3AL5jdxe/ZXXAwGZy/8Fn
        bv/CaGr/w2lm/8RqYv/Fa1//xm1b/8ZuV//Hb1P/xWxK/9Kchv///////////9Sff//Kcjf/znc4/894
        NP/QeTD/0Xss/9J8Kf/TfSX/034h/9R/Hf/VgRn/1oIWxteCEx3XghMAAAAAAAAAAAC+Y3sAvmN7Nb5j
        ed6/ZXX/wGZy/8Fnbv/CaGr/w2lm/8RqYv/FbF7/xm1b/8duV//Ea07/0pyJ////////////1J+B/8lw
        O//Ndjz/znc4/894NP/QejD/0Xss/9J8KP/TfSX/1H4h/9R/Hf/VgRnk1oIWO9aCFwAAAAAAAAAAALxi
        fwC8Yn9JvWJ98r5jef+/ZHb/wGZy/8Fnbv/CaGr/w2lm/8RqYv/Fa1//xm1b/8NpUv/Rm4v/////////
        ///TnoP/yG8//8x1QP/Ndjz/znc4/894NP/QeTD/0Xss/9J8Kf/TfSX/034h/9R/HfjVgBtQ1YAbAL5f
        HgAAAAAAvGCDALxgg1K8YYH7vWJ9/75jef+/ZXX/wGZy/8Fnbv/CaGr/w2lm/8RqYv/FbF7/wmhW/9Ca
        jv///////////9Odhf/HbkP/y3RE/8x1QP/Ndjz/znc4/894NP/QejD/0Xss/9J8KP/TfSX/1H4h/9R+
        H1rVgB4AyGQtAAAAAAC7X4cAu1+HUbxghfq8YYH/vWJ9/75jef+/ZHb/wGZy/8Fnbv/CaGr/w2lm/8Rq
        Yv/BZ1r/0JqQ////////////0pyI/8ZtRv/Kc0j/y3RE/8x1QP/Ndjz/znc4/894NP/QeTD/0Xss/9J8
        Kf/TfSX/030iWNV/JACzWQ0AAAAAALleiwC5XotHul+J77tghf+8YYH/vWJ9/75jef+/ZXX/wGZy/8Fn
        bv/CaGr/w2lm/8BlXf/QmpT////////////SnYv/xWtK/8lxS//Kc0f/y3RE/8x1QP/Ndjz/znc4/894
        NP/QejD/0Xss/9J8KPbSfSZN0n0mAMBgIgAAAAAAuF2PALhdjzG5Xozaul+J/7tghf+8YYH/vWJ9/75j
        ef+/ZHb/wGZy/8Fnbv/CaGr/wGZj/8eGgf/lycb/5cnE/8mJeP/FbFD/yHBP/8lxS//Kckj/y3RE/8x1
        QP/Ndjz/znc4/894NP/QejD/0Xss4NF7KjfReyoAAAAAAAAAAAC4XZEAt12RErlcj7q5XY3/ul+J/7tg
        hf+8YYH/vWJ9/75jef+/ZXX/wGZy/8Fnbv/BaGr/v2dk/8BsZP/BbWD/wmpY/8ZtVv/Hb1P/yHBP/8lx
        S//Kc0f/y3RE/8x1QP/Ndjz/znc4/894NP/QeTHA0XosGNF6LQAAAAAAAAAAALBgmgC9WY0AuFyTfrlc
        kP25XY3/ul+J/7tghf+8YYH/vWJ9/75jef+/ZHb/wGZy/8Fnbv/RjI3/68vK/+vLyP/TjoT/xm1b/8Zu
        V//Hb1P/yHBP/8lxS//Kckj/y3RE/8x1QP/Ndjz/znc4/s94NYiacHwA3HkkAAAAAAAAAAAAtV6UALhb
        lQC3W5YwuFuU47lckP+6Xoz/ul+J/7tghf+8YYH/vWJ9/75jef+/ZHX/wmt3/+jGyf///////////+nI
        xP/HcWT/xmxa/8duV//Hb1P/yHBP/8lxS//Kc0f/y3RE/8x1QP/Ndjznznc5OM53OgDSeS0AAAAAAAAA
        AAAAAAAAtlmYALZXmAW3WpeJuFuU/blckP+5XY3/ul+J/7tghf+8YYH/vWJ9/75jef/AZ3j/3q62//z3
        +P/89/j/37Cv/8VtZf/Fa17/xm1b/8ZuV//Hb1P/yHBP/8lxS//Kckj/y3RE/8x1QJPOdT0HzXU/AAAA
        AAAAAAAAAAAAAAAAAACzHYcAtlyaALZZmSW3WpjHuFuU/7lckP+6Xoz/ul+J/7tghf+8YYH/vWJ9/75i
        ef/Db3//0pGa/9KRl//GcnT/wmhl/8RqYv/FbF7/xm1b/8duV//Hb1P/yHBP/8lxS//Kc0jOy3RELMl1
        RQDQbUIAAAAAAAAAAAAAAAAAAAAAALZJkgCyVaAAvVeMALdZmke3WpjduFuV/7lckP+5XY3/ul+J/7tg
        hf+8YYH/vWJ9/75ief++YnP/v2Nv/8Fmbf/CaGr/w2lm/8RqYv/Fa1//xm1b/8ZuV//Hb1P/yHBP48lx
        TE7Td1IAyW5GAM9wQAAAAAAAAAAAAAAAAAAAAAAAAAAAALVanAC2WZ0Atk6zAbdZm1W3WpjduFuU/7lc
        kP+6Xoz/ul+J/7tghf+8YYH/vWJ9/75jef+/ZXX/wGZy/8Fnbv/CaGr/w2lm/8RqYv/FbF7/xm1b/8du
        V+LHblNf1HBVAslwTQDJckYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALNcmAC1W5sAwUy4AbZZ
        m0W3WpjGuFuU/blckP+5XY3/ul+J/7tghf+8YYH/vWJ9/75jef+/ZHb/wGZy/8Fnbv/CaGr/w2lm/8Rq
        Yv7FbF7Kxm1aS85fVgLKblEAyHFMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/wD/ALRc
        mAC4WJ0AtluPALdZmiS3WpeGuFuU37lckPu5XY3/ul+J/7tghf+8YYH/vWJ9/75jef+/ZXX/wGZy/8Fn
        bvzCaGriw2lmisNrYifRblwAxmxZAMZvUwDMZmYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAALdZnQCzVqsAuFqYALZZngS2XJYrt1uTd7lcj7S6XozUul+J6btghfO8YYHzvWJ96b5j
        edW/ZXW2wGZxesJmbi7BaGwFw2lfAMBuYADCa18AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAKpVqgB4P/QAt1mZALdblQC7WY8AuF2RDbpdjiu6XotAu1+HSrxh
        g0u9Yn9AvWJ8LL1leg7BZGwAwmdsAMJpaADLfHoAxnFxAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtWCVAKdrpgC4XZEAul2OALpe
        iwC7X4cAvGGDAL1ifwC9YnwAvWV6AL1zfwC9aHsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA//gf///AA//+AAB//AAAP/AAAA/wAAAP4AAAB8AAAAPAAAADwAAAA4AA
        AAGAAAABgAAAAYAAAAGAAAAAgAAAAIAAAACAAAAAgAAAAYAAAAGAAAABgAAAAcAAAAPAAAADwAAAA+AA
        AAfwAAAP8AAAD/wAAD/+AAB//8AD//////8=
</value>
  </data>
</root>